#bits 8
#ruledef
{
    nop  () => 0x00
    ldi  (A, {value1}) => 0x01 @ value1`8
    ldi  (B, {value1}) => 0x02 @ value1`8
    ldi_F  ({value0}) => 0x03 @ value0`8
    add  (A, A) => 0x04
    add  (A, B) => 0x05
    add  (B, A) => 0x06
    add  (B, B) => 0x07
    adc  (A, A) => 0x08
    adc  (A, B) => 0x09
    adc  (B, A) => 0x0a
    adc  (B, B) => 0x0b
    sub  (A, B) => 0x0c
    sub  (B, A) => 0x0d
    sbb  (A, B) => 0x0e
    sbb  (B, A) => 0x0f
    cmp  (A, B) => 0x10
    cmp  (B, A) => 0x11
    mov  (A, B) => 0x12
    mov  (B, A) => 0x13
    out  (A) => 0x14
    out  (B) => 0x15
    st  ({address0}, A) => 0x16 @ address0[7:0]
    st  ({address0}, B) => 0x17 @ address0[7:0]
    stabs  (A, A) => 0x18
    stabs  (A, B) => 0x19
    stabs  (B, A) => 0x1a
    stabs  (B, B) => 0x1b
    ld  (A, {address1}) => 0x1c @ address1[7:0]
    ld  (B, {address1}) => 0x1d @ address1[7:0]
    ldabs  (A, A) => 0x1e
    ldabs  (A, B) => 0x1f
    ldabs  (B, A) => 0x20
    ldabs  (B, B) => 0x21
    tstabs  (A) => 0x22
    tstabs  (B) => 0x23
    jmp  ({address0}) => 0x24 @ address0[7:0]
    beq  ({address0}) => 0x25 @ address0[7:0]
    bne  ({address0}) => 0x26 @ address0[7:0]
    bcs  ({address0}) => 0x27 @ address0[7:0]
    bcc  ({address0}) => 0x28 @ address0[7:0]
    out_F  () => 0x29
    hlt  () => 0x2a
    and  (A, B) => 0x2b
    and  (B, A) => 0x2c
    or  (A, B) => 0x2d
    or  (B, A) => 0x2e
}
